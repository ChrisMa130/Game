2016年5月7日 00:36:32
通过阅读文档，可以分析出游戏中多个对象，比如角色（主角和NPC），道具以及线段等。还有一些游戏机制，比如画线，碰撞检测，通关以及死亡等。
如果按照以往的，面向对象的游戏设计思路，那么依据分类就可以来实现了，不过现在需求还不是很明确，不好下手。
另外一个思路，按照面向组件的开发思路来设计，那么这个就比较考验抽象能力。Unity就是一个很好的面向组件的工程。
比如，要定义什么是组件？移动，是一个组件，但凡挂载了移动组件的Object，都具备移动属性（但缺少Input行为，所以无法真正移动）。
那么光有组件还不够，还要定义行为，比如接受输入、碰撞等。这里有一个难点，就是行为和组件之间的关联，Unity各个组件之间大多是没什么关联的，在新的UI组件中，使用了事件机制来做关联，那么问题来了，这个产品是否使用这么复杂的设计呢？
组件设计的好处：通过组合的形式来拼接成为一个产品，各个组件之间使用消息来做关联，组件相对独立，减少耦合，在需要重复修改的产品开发中有较大的优势。
组件设计的缺点：复杂，组件和行为的定义需要多年的程序设计经验，定义不合理不清晰，就会增加后期开发难度，开发难度的增加，开发周期上也会随之增加。

面向对象的好处：传统开发思路，易于理解，快速原型开发，各司其职。
面向对象的害处：虽可通过设计来解决部分耦合，但后期修改时，很难避免部分模块重构。（唉，，技能这都是第三版了。泪目）

还有面向关卡的设计，这个适合原型，或者小产品开发，稍微上点规模或者希望灵活配置的产品就无法胜任。（如果有强力设计能力也可以做，不过个人感觉做到最后还是成了组件）。

不过目前文档尚未完善，很多细节部分无法确定，此时不易动手，而是细化需求，理解需求，然后再思考和设计，最后动手。争取一次搞定一版。（策划需求修改是无法避免的）

